from aiogram import Bot, Router, F
from aiogram.filters import Command
from aiogram.types import  CallbackQuery
from aiogram.types import FSInputFile, Message
from handlers.source.texts import start_message
from keyboards import inline
from id_database import add_user
from aiogram.fsm.context import FSMContext
router = Router()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞
CHANNEL_ID = -1001967423322  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞
CHANNEL_USERNAME = "@uroduzhir"  # –Æ–∑–µ—Ä–Ω–µ–π–º –∫–∞–Ω–∞–ª–∞
CHANNEL_LINK = "https://t.me/uroduzhir"  # –°—Å—ã–ª–∫–∞


class SubscriptionMiddleware:
    async def __call__(self, handler, event: Message | CallbackQuery, data):
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É start –∏ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏
        if (isinstance(event, Message) and event.text == "/start") or \
                (isinstance(event, CallbackQuery) and event.data == "check_sub"):
            return await handler(event, data)

        bot: Bot = data['bot']
        user_id = event.from_user.id

        try:
            member = await bot.get_chat_member(CHANNEL_ID, user_id)
            if member.status not in ['member', 'administrator', 'creator']:
                if isinstance(event, CallbackQuery):
                    await event.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", show_alert=True,reply_markup=inline.subscription_keyboard)
                else:
                    await event.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!",reply_markup=inline.subscription_keyboard)
                return
        except Exception as e:
            print(f"Subscription check error: {e}")
            await event.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏",reply_markup=inline.subscription_keyboard)
            return

        return await handler(event, data)


# def subscription_keyboard():
#     builder = InlineKeyboardBuilder()
#     builder.button(text="üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=CHANNEL_LINK)
#     builder.button(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub")
#     builder.adjust(1)
#     return builder.as_markup()


@router.message(Command("start"))
async def cmd_start(message: Message, bot: Bot,state: FSMContext):
    text= """
    üì¢ <b>–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!!!</b>
    üëâ <a href="https://t.me/uroduzhir">–≤–∞–Ω–¥–∞–ª—ã325</a> üëà
    """
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î (–±–µ–∑ is_bot)
        add_user(
            user_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name
        )

        member = await bot.get_chat_member(CHANNEL_ID, message.from_user.id)
        if member.status in ['member', 'administrator', 'creator']:
            photo = FSInputFile("SRC/start2.jpg")
            await message.answer_photo(photo,caption=start_message(message.from_user),reply_markup=inline.start_keyboard, parse_mode="HTML")
            return
    except Exception as e:
        print(f"Error: {e}")
        # –ü–æ–≤—Ç–æ—Ä–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –ë–î –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        add_user(
            user_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name
        )


    await message.answer(
        text=text,
        reply_markup=inline.subscription_keyboard,
        parse_mode="HTML"
    )
    await state.clear()



@router.callback_query(F.data == "check_sub")
async def check_subscription(callback: CallbackQuery, bot: Bot):
    try:
        member = await bot.get_chat_member(CHANNEL_ID, callback.from_user.id)
        if member.status in ['member', 'administrator', 'creator']:
            await callback.message.edit_text(
                "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã.",
                reply_markup=inline.start
            )
            return
    except Exception as e:
        print(f"Error: {e}")

    await callback.answer("‚ùå –í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å!", show_alert=True,reply_markup=inline.subscription_keyboard)


@router.message(F.text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø")
@router.message(Command("check"))
async def check_access(message: Message, bot: Bot):
    try:
        member = await bot.get_chat_member(CHANNEL_ID, message.from_user.id)
        if member.status in ['member', 'administrator', 'creator']:
            await message.answer("‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω!")
            return
    except Exception as e:
        print(f"Error: {e}")

    await message.answer(
        "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:",
        reply_markup=inline.subscription_keyboard
    )


# –ó–∞—â–∏—â—ë–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
@router.message(Command("secret"))
async def secret_command(message: Message):
    await message.answer("üîê –≠—Ç–æ —Å–µ–∫—Ä–µ—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤!")