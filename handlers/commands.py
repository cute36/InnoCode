from aiogram import Router
from aiogram import filters
from aiogram import  types
from aiogram import F
import random
from handlers.source.texts import help_text,about_text
from keyboards import inline
from aiogram.types import FSInputFile
from urllib.parse import urlparse
from states import Download
from aiogram.fsm.context import FSMContext
from downloader import download_audio
import os
from keyboards.inline import escape_keyboard, escape_keyboard_caption
from config import ADMIN_IDS
from id_database import show_all_users
from aiogram.filters import Command
from constants import USER_AGENTS
import yt_dlp



command_router = Router()


@command_router.message(Command("stats"), F.from_user.id.in_(ADMIN_IDS))
async def admin_stats(message: types.Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î
        stats = show_all_users(return_string=True)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n"
            "------------------------\n"
            f"{stats}\n"
            f"üëë –ê–¥–º–∏–Ω–æ–≤: {len(ADMIN_IDS)}\n"
            "------------------------\n"
            "‚ÑπÔ∏è –ü–æ–ª–Ω—ã–π –¥–∞–º–ø –ë–î –≤–æ –≤–ª–æ–∂–µ–Ω–∏–∏"
        )

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –±–∞–∑–æ–π
        with open("users_db_dump.txt", "w", encoding="utf-8") as f:
            f.write(stats)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º
        await message.answer_document(
            document=types.FSInputFile("users_db_dump.txt"),
            caption=response,
            parse_mode="HTML",
            reply_markup=escape_keyboard_caption
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        if os.path.exists("users_db_dump.txt"):
            os.remove("users_db_dump.txt")

@command_router.message(filters.Command("about"))
async def handler_about(a: types.Message,state: FSMContext) -> None:
    await a.answer(text=about_text,parse_mode="HTML")
    await state.clear()

@command_router.message(filters.Command("help"))
async def handler_about(h: types.Message,state: FSMContext) -> None:
    await h.answer(text=help_text, reply_markup=inline.help_keyboard, parse_mode="HTML")
    await state.clear()

### –õ–û–ì–ò–ö–ê –ü–†–û–í–ï–†–ö–ò –í–ê–õ–ò–î–ù–û–°–¢–ò –°–°–´–õ–û–ö ###


def is_valid_url(url: str) -> bool:
    try:
        result = urlparse(url)
        return all([result.scheme in ('http', 'https'), result.netloc])
    except:
        return False

def is_supported_platform(url: str) -> bool:
    supported_domains = [
        'soundcloud.com'
    ]
    domain = urlparse(url).netloc.lower()
    return any(d in domain for d in supported_domains)

##–†–ê–ë–û–ß–ò–ô –•–≠–ù–î–õ
#@command_router.message(F.text, Download.wait_link)
#async def handle_links(message: types.Message, state: FSMContext) -> None:
    # user_url = message.text.strip()
    #
    # if not is_valid_url(user_url):
    #     await message.answer(
    #         "‚ùå –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤–∞–ª–∏–¥–Ω—É—é —Å—Å—ã–ª–∫—É. –ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:\nhttps://soundcloud.com/...")
    #     return
    #
    # if not is_supported_platform(user_url):
    #     await message.answer("‚ö†Ô∏è –≠—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –†–∞–±–æ—Ç–∞–µ–º —Å SoundCloud.")
    #     return
    #
    # # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    # text_ans = """
    # üîé <b>–ó–∞–≥—Ä—É–∂–∞—é –∞—É–¥–∏–æ...</b>
    #
    # ‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –æ—Ç 15 —Å–µ–∫—É–Ω–¥ –¥–æ 2 –º–∏–Ω—É—Ç
    # ‚åõ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...
    # """
    # processing_msg = await message.answer(text=text_ans, parse_mode="HTML",reply_markup=escape_keyboard)
    #
    # # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ
    # audio_path = await download_audio(user_url, message.from_user.id)
    #
    # if audio_path:
    #     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    #     audio_file = FSInputFile(audio_path)
    #     await message.answer_audio(audio_file, reply_markup=inline.escape_keyboard_caption)
    #
    #     # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    #     try:
    #         os.remove(audio_path)
    #     except Exception as e:
    #         print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
    # else:
    #     await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞—É–¥–∏–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É.",reply_markup=escape_keyboard)
    #
    # # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    # await processing_msg.delete()

### –ü–†–û–ö–°–ò –•–≠–ù–î–õ –ù–ï –£–í–ï–†–ï–ù –ß–¢–û –ó–ê–ì–†–£–ó–ò–¢ –°–°–´–õ–ö–£

#@command_router.message(F.text, Download.wait_link)
# async def handle_links(message: types.Message, state: FSMContext):
#     user_url = message.text.strip()
#
#     processing_msg = await message.answer("üîé –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç",reply_markup=escape_keyboard)
#
#     try:
#         audio_path = await download_audio(user_url, message.from_user.id)
#
#         if audio_path:
#             await message.answer_audio(
#                 FSInputFile(audio_path),
#             )
#             await message.answer(text="–í–æ—Ç –≤–∞—à –∞—É–¥–∏–æ—Ñ–∞–π–ª!üëÜ",reply_markup=escape_keyboard)
#             try:
#                 os.remove(audio_path)
#             except Exception as e:
#                 print(f"File deletion error: {e}")
#         else:
#             await message.answer(
#                 "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞—É–¥–∏–æ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫. "
#                 "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É.",
#                 reply_markup=escape_keyboard
#             )
#
#     except Exception as e:
#         await message.answer(
#             "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω.",
#             reply_markup=escape_keyboard
#         )
#         logger.error(f"Critical error for {user_url}: {str(e)}")
#     finally:
#         await processing_msg.delete()


async def get_track_info(url: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–∫–µ –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏"""
    ydl_opts = {
        'quiet': True,
        'extract_flat': True,
        'skip_download': True,
        'http_headers': {
            'User-Agent': random.choice(USER_AGENTS),
        }
    }

    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=False)
            return {
                'title': info.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                'duration': info.get('duration', 0),
                'thumbnail': info.get('thumbnail'),
                'uploader': info.get('uploader', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å')
            }
    except Exception as e:
        logger.error(f"Error getting track info: {e}")
        return None


@command_router.message(F.text, Download.wait_link)
async def handle_links(message: types.Message, state: FSMContext):
    user_url = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ URL
    if not is_valid_url(user_url):
        await message.answer("‚ùå –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤–∞–ª–∏–¥–Ω—É—é —Å—Å—ã–ª–∫—É.")
        return

    if not is_supported_platform(user_url):
        await message.answer("‚ö†Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ SoundCloud.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ
    track_info = await get_track_info(user_url)
    if not track_info:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ.")
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    duration = int(track_info['duration'])
    minutes, seconds = divmod(duration, 60)
    formatted_duration = f"{minutes}:{seconds:02d}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
    preview_msg = (
        "üéµ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–∫–µ:</b>\n"
        f"‚îú <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {track_info['title']}\n"
        f"‚îú <b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> {track_info['uploader']}\n"
        f"‚îî <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {formatted_duration}\n\n"
        "üîé –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –ø–∞—Ä—É –º–∏–Ω—É—Ç..."
    )

    if track_info['thumbnail']:
        try:
            await message.answer_photo(
                track_info['thumbnail'],
                caption=preview_msg,
                parse_mode="HTML",
            )
        except:
            await message.answer(preview_msg, parse_mode="HTML")
    else:
        await message.answer(preview_msg, parse_mode="HTML")

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ
    try:
        audio_path = await download_audio(user_url, message.from_user.id)
        if audio_path:
            await message.answer_audio(
                FSInputFile(audio_path),
                title=track_info['title'],
                performer=track_info['uploader']
            )
            await message.answer("‚úÖ –ì–æ—Ç–æ–≤–æ! –í–æ—Ç —Ç–≤–æ–π —Ç—Ä–µ—á–æ–∫!üëÜ", reply_markup=inline.escape_keyboard)
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞—É–¥–∏–æ.", reply_markup=inline.escape_keyboard)
    except ValueError as e:
        await message.answer(f"‚ùå {str(e)}", reply_markup=inline.escape_keyboard)
    except Exception as e:
        logger.error(f"Download failed: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ.", reply_markup=inline.escape_keyboard   )
    finally:
        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        try:
            if audio_path and os.path.exists(audio_path):
                os.remove(audio_path)
        except Exception as e:
            logger.error(f"Error deleting file: {e}")





