from aiogram import  types
import aiogram
from aiogram import Router
from aiogram import F
from aiogram.fsm.context import FSMContext
import random
from keyboards import inline
from keyboards import reply
from handlers.source.texts import start_message,download_prompts,get_id_prompts,help_text,about_text
from keyboards.inline import escape_keyboard, start_keyboard, escape_keyboard_caption
from aiogram.types import FSInputFile
from states import Download,ID,Sticker,Photo


callback_router = Router()


@callback_router.callback_query(F.data == "download_pressed")
async def handle_download(callback: aiogram.types.CallbackQuery,state: FSMContext):
    await callback.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")
    await callback.message.delete()
    photo = FSInputFile("SRC/download4.png")
    await callback.message.answer_photo(photo,caption=download_prompts,parse_mode="HTML",reply_markup=escape_keyboard_caption)
    await state.set_state(Download.wait_link)


@callback_router.callback_query(F.data == "id_pressed")
async def handle_id(callback: aiogram.types.CallbackQuery,state: FSMContext):
    await callback.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")
    await callback.message.delete()
    await callback.message.answer(text=get_id_prompts,parse_mode="HTML",reply_markup=inline.id_keyboard)
    await state.set_state(ID.wait_id)

@callback_router.callback_query(F.data == "escape_id")
async def handle_cancel(callback: aiogram.types.CallbackQuery,state: FSMContext):
    await callback.answer("–í–æ–∑–≤—Ä–∞—â–∞—é...")
    await callback.message.delete()
    await callback.message.answer(text=get_id_prompts,parse_mode="HTML",reply_markup=inline.id_keyboard)
    await state.set_state(ID.wait_id)

@callback_router.callback_query(F.data == "escape_pressed")
async def handle_cancel(callback: aiogram.types.CallbackQuery,state: FSMContext):
    await callback.answer("–í–æ–∑–≤—Ä–∞—â–∞—é...")
    await callback.message.edit_text(text=start_message(callback.from_user),parse_mode="HTML",reply_markup=start_keyboard)
    await state.clear()
@callback_router.callback_query(F.data == "escape_caption_pressed")
async def handle_caption_cancel(callback: aiogram.types.CallbackQuery,state:FSMContext):
    await callback.answer("–í–æ–∑–≤—Ä–∞—â–∞—é...")
    await callback.message.delete()
    photo = FSInputFile("SRC/start2.jpg")
    await callback.message.answer_photo(photo,caption=start_message(callback.from_user), parse_mode="HTML",reply_markup=start_keyboard)
    await state.clear()


@callback_router.callback_query(F.data == "help_pressed")
async def handle_help(callback: aiogram.types.CallbackQuery):
    await callback.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")
    await callback.message.delete()
    await callback.message.answer(text=help_text,parse_mode="HTML",reply_markup=inline.escape_keyboard)

@callback_router.callback_query(F.data == "about_pressed")
async def handle_about(callback: aiogram.types.CallbackQuery):
    await callback.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")
    await callback.message.delete()
    await callback.message.answer(text=about_text,parse_mode="HTML",reply_markup=escape_keyboard)

@callback_router.callback_query(F.data == "mp3",Download.wait_format)
async def handler_mp3(callback: aiogram.types.CallbackQuery,state: FSMContext):
    text_mp3 = """
    üîÑ <b>–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤ MP3...</b>

    –í–∞—à –∞—É–¥–∏–æ—Ñ–∞–π–ª –≥–æ—Ç–æ–≤–∏—Ç—Å—è! –û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç 15-30 —Å–µ–∫—É–Ω–¥.

    üìå <i>–ü–æ–∫–∞ –∂–¥–µ—Ç–µ:</i>
    ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≥—Ä–æ–º–∫–æ—Å—Ç—å –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
    ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å –≤ —Å—Ç–∞–±–∏–ª—å–Ω–æ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏

    –°—Ç–∞—Ç—É—Å: <code>–ò–∑–≤–ª–µ–∫–∞–µ–º –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫—É...</code>
    """
    await callback.answer("–ì–æ—Ç–æ–≤–ª—é —Ñ–∞–π–ª...")
    await callback.message.answer(text=text_mp3,parse_mode="HTML")
    await state.set_state(Download.wait_file)

@callback_router.callback_query(F.data == "mp4",Download.wait_format)
async def handler_mp4(callback: aiogram.types.CallbackQuery,state: FSMContext):
    text_mp4 = """
        üîÑ <b>–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤ MP4...</b>

        –í–∞—à –≤–∏–¥–µ–æ—Ñ–∞–π–ª –≥–æ—Ç–æ–≤–∏—Ç—Å—è! –û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç 15-30 —Å–µ–∫—É–Ω–¥.

        üìå <i>–ü–æ–∫–∞ –∂–¥–µ—Ç–µ:</i>
        ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≥—Ä–æ–º–∫–æ—Å—Ç—å –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
        ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å –≤ —Å—Ç–∞–±–∏–ª—å–Ω–æ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏

        –°—Ç–∞—Ç—É—Å: <code>–ò–∑–≤–ª–µ–∫–∞–µ–º –≤–∏–¥–µ–æ–¥–æ—Ä–æ–∂–∫—É...</code>
        """
    await callback.answer("–ì–æ—Ç–æ–≤–ª—é —Ñ–∞–π–ª...")
    await callback.message.answer(text=text_mp4, parse_mode="HTML")
    await state.set_state(Download.wait_file)

### –û–ë–†–ê–ë–û–¢–ö–ê –°–í–û–ï–ì–û –ê–ô–î–ò ###
@callback_router.callback_query(F.data == "user_id",ID.wait_id)
async def show_user_id(callback: types.CallbackQuery,state: FSMContext):
    user = callback.from_user

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response = (
        "üë§ <b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>\n"
        f"‚îú üîñ –ò–º—è: {user.full_name}\n"
        f"‚îú üÜî ID: <code>{user.id}</code>\n"
        f"‚îú @ –Æ–∑–µ—Ä–Ω–µ–π–º: @{user.username if user.username else '–Ω–µ—Ç'}\n"
        f"‚îî ü§ñ –ë–æ—Ç: {'–î–∞' if user.is_bot else '–ù–µ—Ç'}"
    )

    await callback.message.edit_text(
        response,
        parse_mode="HTML",
        reply_markup=inline.escape_id  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
    )
    await callback.answer()


#### –û–ë–†–ê–ë–û–¢–ö–ê –°–¢–ò–ö–ï–†–ê#####
@callback_router.callback_query(F.data == "sticker_id")
async def request_sticker_id(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üìå –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Ç–∏–∫–µ—Ä, –∏ —è –ø–æ–∫–∞–∂—É –µ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:",
        reply_markup=inline.escape_id
    )
    await state.set_state(Sticker.waiting_for_sticker)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∏–∫–µ—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è
@callback_router.message(Sticker.waiting_for_sticker, F.sticker)
async def handle_sticker_input(message: types.Message, state: FSMContext):
    sticker = message.sticker

    response = (
        "üìå <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∏–∫–µ—Ä–µ:</b>\n"
        f"‚îú üÜî <b>ID:</b> <code>{sticker.file_id}</code>\n"
        f"‚îú üì¶ <b>–ù–∞–±–æ—Ä:</b> {sticker.set_name if sticker.set_name else '–Ω–µ—Ç'}\n"
        f"‚îú üòÄ <b>–≠–º–æ–¥–∑–∏:</b> {sticker.emoji if sticker.emoji else '–Ω–µ—Ç'}\n"
        f"‚îú üìè <b>–†–∞–∑–º–µ—Ä:</b> {sticker.file_size // 1024} KB\n"
        f"‚îú üñº <b>–¢–∏–ø:</b> {sticker.type}\n"
        f"‚îî üîÑ <b>–ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π:</b> {'–î–∞' if sticker.is_animated else '–ù–µ—Ç'}"
    )

    await message.reply(response, parse_mode="HTML",reply_markup=inline.escape_id)
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ-—Å—Ç–∏–∫–µ—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è
@callback_router.message(Sticker.waiting_for_sticker)
async def handle_non_photo_input(message: types.Message):
    # –£–¥–∞–ª—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.delete()
    except:
        pass

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Å–∞–º–æ —É–¥–∞–ª–∏—Ç—Å—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    await message.answer(
        "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ —Å—Ç–∏–∫–µ—Ä",
        reply_markup=inline.escape_id
    )


###–ò–ù–§–ê –ü–†–û –§–û–¢–ö–ò####


@callback_router.callback_query(F.data == "photo_id")
async def request_photo_info(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ, –∏ —è –ø–æ–∫–∞–∂—É –µ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:",
        reply_markup=inline.escape_id
    )
    await state.set_state(Photo.waiting_for_photo)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è
@callback_router.message(Photo.waiting_for_photo, F.photo)
async def handle_photo_input(message: types.Message, state: FSMContext):
    photo = message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ

    response = (
        "üì∏ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–æ—Ç–æ:</b>\n"
        f"‚îú üÜî <b>File ID:</b> <code>{photo.file_id}</code>\n"
        f"‚îú üìè <b>–†–∞–∑–º–µ—Ä:</b> {photo.file_size // 1024} KB\n"
        f"‚îú üñº <b>–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ:</b> {photo.width}x{photo.height}\n"
        f"‚îî üìÅ <b>Unique ID:</b> <code>{photo.file_unique_id}</code>"
    )

    await message.reply(response, parse_mode="HTML",reply_markup=inline.escape_id)
    await state.clear()
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ-—Ñ–æ—Ç–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è

@callback_router.message(Photo.waiting_for_photo)
async def handle_non_photo_input(message: types.Message):
    # –£–¥–∞–ª—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.delete()
    except:
        pass

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Å–∞–º–æ —É–¥–∞–ª–∏—Ç—Å—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    await message.answer(
        "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üì∑' –≤ –º–µ–Ω—é",
        reply_markup=inline.escape_id
    )

