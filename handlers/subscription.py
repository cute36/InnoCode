from aiogram import Bot, types, Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import ReplyKeyboardRemove,FSInputFile, Message, User, Sticker, Contact, Document, PhotoSize
from handlers.source.texts import start_message,help_text,about_text
from keyboards import inline
router = Router()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞
CHANNEL_ID = -1001967423322  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞
CHANNEL_USERNAME = "@uroduzhir"  # –Æ–∑–µ—Ä–Ω–µ–π–º –∫–∞–Ω–∞–ª–∞
CHANNEL_LINK = "https://t.me/uroduzhir"  # –°—Å—ã–ª–∫–∞


class SubscriptionMiddleware:
    async def __call__(self, handler, event: Message | CallbackQuery, data):
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É start –∏ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏
        if (isinstance(event, Message) and event.text == "/start") or \
                (isinstance(event, CallbackQuery) and event.data == "check_sub"):
            return await handler(event, data)

        bot: Bot = data['bot']
        user_id = event.from_user.id

        try:
            member = await bot.get_chat_member(CHANNEL_ID, user_id)
            if member.status not in ['member', 'administrator', 'creator']:
                if isinstance(event, CallbackQuery):
                    await event.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", show_alert=True)
                else:
                    await event.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!")
                return
        except Exception as e:
            print(f"Subscription check error: {e}")
            await event.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏")
            return

        return await handler(event, data)


# def subscription_keyboard():
#     builder = InlineKeyboardBuilder()
#     builder.button(text="üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=CHANNEL_LINK)
#     builder.button(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub")
#     builder.adjust(1)
#     return builder.as_markup()


@router.message(Command("start"))
async def cmd_start(message: Message, bot: Bot):
    try:
        member = await bot.get_chat_member(CHANNEL_ID, message.from_user.id)
        if member.status in ['member', 'administrator', 'creator']:
            photo = FSInputFile("SRC/start2.jpg")
            await message.answer_photo(photo,caption=start_message(message.from_user),reply_markup=inline.start_keyboard, parse_mode="HTML")
            return
    except Exception as e:
        print(f"Error: {e}")

    await message.answer(
        f"–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {CHANNEL_USERNAME}",
        reply_markup=inline.subscription_keyboard
    )


@router.callback_query(F.data == "check_sub")
async def check_subscription(callback: CallbackQuery, bot: Bot):
    try:
        member = await bot.get_chat_member(CHANNEL_ID, callback.from_user.id)
        if member.status in ['member', 'administrator', 'creator']:
            await callback.message.edit_text(
                "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã.",
                reply_markup=None
            )
            return
    except Exception as e:
        print(f"Error: {e}")

    await callback.answer("‚ùå –í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å!", show_alert=True)


@router.message(F.text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø")
@router.message(Command("check"))
async def check_access(message: Message, bot: Bot):
    try:
        member = await bot.get_chat_member(CHANNEL_ID, message.from_user.id)
        if member.status in ['member', 'administrator', 'creator']:
            await message.answer("‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω!")
            return
    except Exception as e:
        print(f"Error: {e}")

    await message.answer(
        "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:",
        reply_markup=subscription_keyboard()
    )


# –ó–∞—â–∏—â—ë–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
@router.message(Command("secret"))
async def secret_command(message: Message):
    await message.answer("üîê –≠—Ç–æ —Å–µ–∫—Ä–µ—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤!")